FORMAT: 1A
HOST: https://watson-wdc01.ihost.com

# Watson API
Use the IBM Watson Question and Answer REST service to submit questions and retrieve answers.

## Questions [/instance/507/deepqa/v1/question]

### Create a Question [POST]
Post a question for Watson so that you can receive an answer.

#### Headers

Name          | Required | Description
------------- | -------- | -----------
Accept        | No       | Specifies the format of the response. Must match Content-Type. Either `application/json` or `application/xml`.
Content-Type  | Yes      | Specifies the format of the request. Must match Accept. Either `application/json` or `application/xml`.
X-SyncTimeout | Yes      | Number of seconds to wait before request times out. `-1` means unlimited.

#### Question Parameters

Properties of `question` in the request body:

<table>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Required</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>answerAssertion</td>
        <td>string</td>
        <td>No</td>
        <td>
            <p>
                Specify an answer to receive the supporting evidence passages for that answer. Without this element, Watson searches for answers from the <code>questionText</code>. When you assert an answer, Watson uses that answer instead to search for supporting evidence passages.
            </p>
            <p>
                If you configured your pipeline to support a ranked list of evidence, the supporting evidence appears in the <code>question.evidencelist</code> section. If you include the <code>evidenceRequest</code> element with the question, the supporting evidence appears in the <code>question.answers.answer.evidence</code> section.
            </p>
            <p>
                If no supporting passages are returned for the asserted answer, the API returns a message that no answers were found.
            </p>
        </td>
    </tr>
    <tr>
        <td>category</td>
        <td>string</td>
        <td>No</td>
        <td>The category of the question in terms of a constraint on the possible answers.</td>
    </tr>
    <tr>
        <td>context</td>
        <td>string</td>
        <td>No</td>
        <td>
            <p>
                A natural language string that is composed of words that provide extra information for Watson to consider when it determines answers. The maximum length of this element is 1024 characters.<br>
            </p>
            <p>
                The <code>context</code> element can have one of the following values:
            </p>
            <dl>
                <dt>plain text</dt>
                <dd>The context is provided as text</dd>
                <dt>url</dt>
                <dd>
                    <p>
                        A valid URL that points to the context string. The service accepts text and HTML in the response.
                    </p>
                    <p>
                        The first 1024 characters of the contents in the file that is identified by the URL are used as the context value. If the file is not found (HTTP 404), the service returns an error and the question is not submitted to Watson.
                    </p>
                </dd>
            </dl>
        </td>
    </tr>
    <tr>
        <td>evidenceRequest</td>
        <td>object</td>
        <td>No</td>
        <td>
            <p>
                Specifies that you want Watson to return supporting evidence for each answer in the <code>question.answers.answer.evidence</code> section of the answer response.
            </p>
            <p>
                <strong>Important</strong>: Do not confuse this element with the <code>question.evidencelist</code> section of the response (i.e. when a request is made with <code>question.answerAssertion</code>). The evidence that is returned by using <code>evidenceRequest</code> was not used when Watson searched for the answer. This evidence is returned after Watson generates, scores, and ranks the answers.
            </p>
            <p>
                <code>evidenceRequest</code> has two properties:
            </p>
            <dl>
                <dt><code>items</code></dt>
                <dd>Integer: the maximum number of supporting passages to return for each answer. Default: 3.</dd>
                <dt><code>url</code></dt>
                <dd>Whether to return evidence profiles (indicators for where the evidence came from) for each possible answer. <code>"yes"</code> or <code>"no"</code> (default).</dd>
            </dl>
        </td>
    </tr>
    <tr>
        <td>filters</td>
        <td>array</td>
        <td>No</td>
        <td>
            <p>
                The container for a set of filters. Filters allow the use of metadata to restrict answers to come from specific documents.
            </p>
            <p>
                When you include more than one filter in this container, they are combined with a logical AND to restrict the search. For example, you want to filter for answers from Wikipedia documents created in 2013. In contrast, multiple entries in the <code>question.filters.filter.values</code> container are combined with a logical OR.
            </p>
            <p>
                See <strong>Filter Parameters</strong> below for properties of each object in <code>filters</code>.
            </p>
        </td>
    </tr>
    <tr>
        <td>formattedAnswer</td>
        <td>boolean</td>
        <td>No</td>
        <td>
            <p>
                Include this element and set it to <code>true</code> to receive both formatted answer text and unformatted text in an answer response. The answer is returned in HTML format.
            </p>
        </td>
    </tr>
    <tr>
        <td>items</td>
        <td>integer</td>
        <td>No</td>
        <td>
            <p>
                An integer in the range 1 - 10 that represents the number of possible answers to be returned. Default: 5
            </p>
        </td>
    </tr>
    <tr>
        <td>lat</td>
        <td>string</td>
        <td>No</td>
        <td>
            <p>
                The lexical answer type (LAT) of the question. The LAT is a word or noun phrase that appears in the question, or is implied by it. In Watson, the LAT specifies the type of the answer that is appropriate. In most cases, Watson extracts the LAT and you do not need to pass it with the question.
            </p>
        </td>
    </tr>
    <tr>
        <td>passthru</td>
        <td>string</td>
        <td>No</td>
        <td>
            <p>
                Specifies a string that you include with the question. The <code>passthru</code> data is not submitted with the pipeline but does pass through to the answer.
            </p>
            <p>
                You can specify the encoding of a binary large object if it can be represented by using a string.
            </p>
            <p>
                The maximum size of the data is defined in the configuration set as a value in <code>qa.question.passthru.maxsize</code>. If the size of the data exceeds the value in <code>qa.question.passthru.maxsize</code>, the question is not submitted to the pipeline and produces the following error:

                <pre><code>AQWTL00163E_FIELD_PASSTHRU_EXCEEDS_SIZE = "Field passthru exceeds configured limit in size"</code></pre>
            </p>
            <p>
                To modify or add elements to the submitted CAS, use the question extension.
            </p>
        </td>
    </tr>
    <tr>
        <td>questionText</td>
        <td>string</td>
        <td>Yes</td>
        <td>
            <p>
                The text of the question to be answered.
            </p>
        </td>
    </tr>
    <tr>
        <td>synonymList</td>
        <td>string</td>
        <td>No</td>
        <td>
            <p>
                The container for the set of synonyms. You can provide feedback to Watson by resubmitting a question and including an updated list of synonyms.
            </p>
        </td>
    </tr>
</table>

#### Filter Parameters

Properties of each object in `question.filters` in the request body:

<table>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Required</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>filterType</td>
        <td>string</td>
        <td>Yes</td>
        <td>
            <p>
                The type of filter. Supported values:
            </p>
            <dl>
                <dt><code>"dateRangeFilter"</code></dt>
                <dd>Filter the answer by date.</dd>
                <dt><code>"metadataFilter"</code></dt>
                <dd>Filter the answer by an indexed metadata field name.</dd>
                <dt><code>"prefixFilter"</code></dt>
                <dd>Filter the answer by terms that start with the same prefix.</dd>
                <dt><code>"queryFilter"</code></dt>
                <dd>Filter the answer by an indexed metadata field name.</dd>
            </dl>
        </td>
    </tr>
    <tr>
        <td>fieldName</td>
        <td>string</td>
        <td>Yes</td>
        <td>
            <p>
                The name of the indexed metadata field.
            </p>
            <p>
                TODO: Clarify the following:
            </p>
            <p>
                When the <code>@filterType</code> is <code>dateRangeFilter</code>, set the value of <code>@fieldName</code> to <code>indexedKey</code>.<em>metadata</em>.
            </p>
            <p>
                When the <code>@filterType</code> is <code>prefixFilter</code> or <code>queryFilter</code>, set the value of <code>@fieldName</code> to <code>indexed</code><em>metadata field name</em>.
            </p>
        </td>
    </tr>
    <tr>
        <td>values</td>
        <td>array</td>
        <td>Yes</td>
        <td>
            <p>
                The container for a set of metadata values of the indexed field name <code>question.filters.filter.fieldName</code>. The values in this element must match the values in the index.
            </p>
            <p>
                When you include more than one value in this container, they are combined with a logical OR to expand the search. For example, you want to filter for answers from multiple corpora. In contrast, multiple filters in the <code>question.filters</code> container are combined with a logical AND.
            </p>
            <p>
                The format for <code>@dateRangeFilter</code> filterType is <code>"start_date:end_date"</code>. The date format is a string in the format <code>"YYYYMMDDHHMMSS"</code>. Specify an open-ended range by substituting the string <code>"null"</code> for the value. However either the start date or the end date must have a date. For example <code>"20140101000000:null"</code> returns all dates from Jan 1, 2014 to the present date. By specifying the value <code>"null:20131231235959"</code>, you filter by all dates before December 1, 2013 at 23:59:59.
            </p>
            <p>
                The value of a <code>@queryFilter</code> filterType can be multiple terms separated by one or more spaces. The value must match the full term of the filter, but is not case-sensitive. For example, the following JSON example matches index values of <code>"Ibm Publications"</code> and <code>"ibm publications"</code>, but not <code>"IBM Publication"</code>:

                <pre><code>"filters": [
  {
    "filterType": "queryFilter",
    "fieldName": "indexedPublisher",
    "values": ["IBM Publications"]
  }
]</code></pre>
            </p>
        </td>
    </tr>
</table>

+ Request (application/json)

    + Headers
    
            Accept: application/json
            X-SyncTimeout: 30
        
    + Body

            {
                "question": {
                    "questionText": "His 1983 hit \"Beat it\" featured Eddie Van Halen on guitar."
                }
            }

+ Response 200 (application/json)

        {
            "question": {
                "qclasslist": [
                    {
                    "value": "FACTOID" 
                    }
                ],
                "focuslist": [
                    {
                        "value": "His"
                    }
                ],
                "latlist": [
                    {
                        "value": "he"
                    }
                ],
                "pipelineid": "433259107",
                "category": "",
                "items": 5,
                "status": "Complete",
                "id": "AE71A54A2BED4AE7BAAEEA98764ECB47",
                "questionText": "His 1983 hit \"Beat it\" featured Eddie Van Halen on guitar.", 
                "evidenceRequest": {
                    "items": -1,
                    "profile": "NO" 
                },
                "answers": [ 
                    {
                        "id": 0,
                        "text": "Michael Jackson", "confidence": 0.42276
                    }, 
                    {
                        "id": 1,
                        "text": "Rick Derringer",
                        "confidence": 0.22121
                    }, 
                    {
                        "id": 2,
                        "text": "Thriller", "confidence": 0.12293
                    }, 
                    {
                        "id": 3,
                        "text": "Jeff Porcaro", "confidence": 0.09981
                    },
                    {
                        "id": 4,
                        "text": "Quincy Jones", "confidence": 0.05383
                    }
                ],  
                "errorNotifications": [],
                "passthru": ""
            }
        }
