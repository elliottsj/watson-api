FORMAT: 1A
HOST: https://watson-wdc01.ihost.com

# Watson API
Use the IBM Watson Question and Answer REST service to submit questions and retrieve answers.

# Group Questions
Question-related resources

## Questions Collection [/instance/507/deepqa/v1/question]

### Create a Question [POST]
Post a question for Watson so that you can receive an answer.

#### Headers

Name          | Required | Description
------------- | -------- | -----------
Accept        | No       | Specifies the format of the response. Must match Content-Type. Either `application/json` or `application/xml`.
Content-Type  | Yes      | Specifies the format of the request. Must match Accept. Either `application/json` or `application/xml`.
X-SyncTimeout | Yes      | Number of seconds to wait before request times out. `-1` means unlimited.

#### Question Parameters

Properties of `question` in the request body:

<table>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>answerAssertion</td>
        <td>string</td>
        <td>
            Specify an answer to receive the supporting evidence passages for that answer. Without this element, Watson searches for answers from the <code>questionText</code>. When you assert an answer, Watson uses that answer instead to search for supporting evidence passages.<br>
            If you configured your pipeline to support a ranked list of evidence, the supporting evidence appears in the <code>question.evidencelist</code> section. If you include the <code>evidenceRequest</code> element with the question, the supporting evidence appears in the <code>question.answers.answer.evidence</code> section.<br>
            If no supporting passages are returned for the asserted answer, the API returns a message that no answers were found.
        </td>
    </tr>
    <tr>
        <td>category</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>context</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>evidenceRequest</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>filters</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>formattedAnswer</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>items</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>lat</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>passthru</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>questionText</td>
        <td>string</td>
        <td></td>
    </tr>
    <tr>
        <td>synonymList</td>
        <td>string</td>
        <td></td>
    </tr>
</table>

+ Request (application/json)

    + Headers
    
            Accept: application/json
            X-SyncTimeout: 30
        
    + Body

            {
                "question": {
                    "questionText": "His 1983 hit \"Beat it\" featured Eddie Van Halen on guitar."
                }
            }

+ Response 200 (application/json)

        {
            "question": {
                "qclasslist": [
                    {
                    "value": "FACTOID" 
                    }
                ],
                "focuslist": [
                    {
                        "value": "His"
                    }
                ],
                "latlist": [
                    {
                        "value": "he"
                    }
                ],
                "pipelineid": "433259107",
                "category": "",
                "items": 5,
                "status": "Complete",
                "id": "AE71A54A2BED4AE7BAAEEA98764ECB47",
                "questionText": "His 1983 hit \"Beat it\" featured Eddie Van Halen on guitar.", 
                "evidenceRequest": {
                    "items": -1,
                    "profile": "NO" 
                },
                "answers": [ 
                    {
                        "id": 0,
                        "text": "Michael Jackson", "confidence": 0.42276
                    }, 
                    {
                        "id": 1,
                        "text": "Rick Derringer",
                        "confidence": 0.22121
                    }, 
                    {
                        "id": 2,
                        "text": "Thriller", "confidence": 0.12293
                    }, 
                    {
                        "id": 3,
                        "text": "Jeff Porcaro", "confidence": 0.09981
                    },
                    {
                        "id": 4,
                        "text": "Quincy Jones", "confidence": 0.05383
                    }
                ],  
                "errorNotifications": [],
                "passthru": ""
            }
        }
